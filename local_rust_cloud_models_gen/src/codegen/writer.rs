use std::error::Error as StdError;
use std::fmt::{self, Display, Formatter, Write};

use super::module::ModWriter;
use super::visibility::Visibility;

#[non_exhaustive]
#[derive(Debug)]
pub struct CodeWriterError {}

impl Display for CodeWriterError {
    fn fmt(&self, f: &mut Formatter<'_>) -> fmt::Result {
        write!(f, "error writing Rust code")
    }
}

impl StdError for CodeWriterError {}

pub struct CodeWriter<'a> {
    doc: &'a mut String,
}

impl<'a> CodeWriter<'a> {
    pub fn new(doc: &'a mut String) -> Self {
        write!(doc, "// DO NOT EDIT. The code is generated by Local Rust Cloud models gen tool.\n").unwrap();
        Self { doc }
    }
}

impl<'a> CodeWriter<'a> {
    pub fn new_mod<'b, 'c>(&'c mut self, visibility: Visibility, name: &'b str) -> ModWriter<'c, 'b> {
        ModWriter::new(self.doc, visibility, name)
    }
}
